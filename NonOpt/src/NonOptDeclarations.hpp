// Copyright (C) 2025 Frank E. Curtis
//
// This code is published under the MIT License.
//
// Author(s) : Frank E. Curtis

#ifndef __NONOPTDECLARATIONS_HPP__
#define __NONOPTDECLARATIONS_HPP__

#include "NonOptException.hpp"

namespace NonOpt
{

/** @name Exceptions */
//@{
/**
 * NonOpt exceptions
 */
DECLARE_EXCEPTION(NONOPT_SUCCESS_EXCEPTION);
DECLARE_EXCEPTION(NONOPT_OBJECTIVE_SIMILARITY_EXCEPTION);
DECLARE_EXCEPTION(NONOPT_OBJECTIVE_TOLERANCE_EXCEPTION);
DECLARE_EXCEPTION(NONOPT_CPU_TIME_LIMIT_EXCEPTION);
DECLARE_EXCEPTION(NONOPT_ITERATE_NORM_LIMIT_EXCEPTION);
DECLARE_EXCEPTION(NONOPT_ITERATION_LIMIT_EXCEPTION);
DECLARE_EXCEPTION(NONOPT_FUNCTION_EVALUATION_LIMIT_EXCEPTION);
DECLARE_EXCEPTION(NONOPT_GRADIENT_EVALUATION_LIMIT_EXCEPTION);
DECLARE_EXCEPTION(NONOPT_APPROXIMATE_HESSIAN_UPDATE_FAILURE_EXCEPTION);
DECLARE_EXCEPTION(NONOPT_DERIVATIVE_CHECKER_FAILURE_EXCEPTION);
DECLARE_EXCEPTION(NONOPT_DIRECTION_COMPUTATION_FAILURE_EXCEPTION);
DECLARE_EXCEPTION(NONOPT_FUNCTION_EVALUATION_FAILURE_EXCEPTION);
DECLARE_EXCEPTION(NONOPT_FUNCTION_EVALUATION_ASSERT_FAILURE_EXCEPTION);
DECLARE_EXCEPTION(NONOPT_GRADIENT_EVALUATION_FAILURE_EXCEPTION);
DECLARE_EXCEPTION(NONOPT_GRADIENT_EVALUATION_ASSERT_FAILURE_EXCEPTION);
DECLARE_EXCEPTION(NONOPT_LINE_SEARCH_FAILURE_EXCEPTION);
DECLARE_EXCEPTION(NONOPT_POINT_SET_UPDATE_FAILURE_EXCEPTION);
DECLARE_EXCEPTION(NONOPT_PROBLEM_DATA_FAILURE_EXCEPTION);
DECLARE_EXCEPTION(NONOPT_SYMMETRIC_MATRIX_ASSERT_EXCEPTION);
DECLARE_EXCEPTION(NONOPT_TERMINATION_FAILURE_EXCEPTION);
DECLARE_EXCEPTION(NONOPT_VECTOR_ASSERT_EXCEPTION);
/**
 * Approximate Hessian update exceptions
 */
DECLARE_EXCEPTION(AH_SUCCESS_EXCEPTION);
DECLARE_EXCEPTION(AH_EVALUATION_FAILURE_EXCEPTION);
DECLARE_EXCEPTION(AH_NORM_TOLERANCE_VIOLATION_EXCEPTION);
DECLARE_EXCEPTION(AH_PRODUCT_TOLERANCE_VIOLATION_EXCEPTION);
/**
 * Derivative checker exceptions
 */
DECLARE_EXCEPTION(DE_SUCCESS_EXCEPTION);
DECLARE_EXCEPTION(DE_FAILURE_EXCEPTION);
/**
 * Direction computation exceptions
 */
DECLARE_EXCEPTION(DC_SUCCESS_EXCEPTION);
DECLARE_EXCEPTION(DC_CPU_TIME_LIMIT_EXCEPTION);
DECLARE_EXCEPTION(DC_EVALUATION_FAILURE_EXCEPTION);
DECLARE_EXCEPTION(DC_ITERATION_LIMIT_EXCEPTION);
DECLARE_EXCEPTION(DC_QP_FAILURE_EXCEPTION);
/**
 * Line search exceptions
 */
DECLARE_EXCEPTION(LS_SUCCESS_EXCEPTION);
DECLARE_EXCEPTION(LS_EVALUATION_FAILURE_EXCEPTION);
DECLARE_EXCEPTION(LS_INTERVAL_TOO_SMALL_EXCEPTION);
DECLARE_EXCEPTION(LS_ITERATION_LIMIT_EXCEPTION);
DECLARE_EXCEPTION(LS_STEPSIZE_TOO_SMALL_EXCEPTION);
/**
 * Point set update exceptions
 */
DECLARE_EXCEPTION(PS_SUCCESS_EXCEPTION);
DECLARE_EXCEPTION(PS_FAILURE_EXCEPTION);
/**
 * QP solver exceptions
 */
DECLARE_EXCEPTION(QP_SUCCESS_EXCEPTION);
DECLARE_EXCEPTION(QP_CPU_TIME_LIMIT_EXCEPTION);
DECLARE_EXCEPTION(QP_FACTORIZATION_ERROR_EXCEPTION);
DECLARE_EXCEPTION(QP_INPUT_ERROR_EXCEPTION);
DECLARE_EXCEPTION(QP_ITERATION_LIMIT_EXCEPTION);
DECLARE_EXCEPTION(QP_NAN_ERROR_EXCEPTION);
/**
 * Symmetric matrix exceptions
 */
DECLARE_EXCEPTION(SM_SUCCESS_EXCEPTION);
DECLARE_EXCEPTION(SM_FAILURE_EXCEPTION);
/**
 * Termination exceptions
 */
DECLARE_EXCEPTION(TE_SUCCESS_EXCEPTION);
DECLARE_EXCEPTION(TE_EVALUATION_FAILURE_EXCEPTION);
//@}

} // namespace NonOpt

#endif /* __NONOPTDECLARATIONS_HPP__ */
